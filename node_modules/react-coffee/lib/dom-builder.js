(function() {
  var DOM, DOMBuilder, Mixin, TagNames, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  DOM = require('react').DOM;

  Mixin = require('mixto');

  TagNames = "a abbr address area article aside audio b base bdi bdo big blockquote body br\nbutton canvas caption cite code col colgroup data datalist dd del details dfn\ndiv dl dt em embed fieldset figcaption figure footer form h1 h2 h3 h4 h5 h6\nhead header hr html i iframe img input ins kbd keygen label legend li link main\nmap mark menu menuitem meta meter nav noscript object ol optgroup option output\np param pre progress q rp rt ruby s samp script section select small source\nspan strong style sub summary sup table tbody td textarea tfoot th thead time\ntitle tr track u ul var video wbr circle g line path polyline rect svg text".split(/\s+/);

  module.exports = DOMBuilder = (function(_super) {
    var tagName, _fn, _i, _len,
      _this = this;

    __extends(DOMBuilder, _super);

    function DOMBuilder() {
      _ref = DOMBuilder.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    _fn = function(tagName) {
      return DOMBuilder.prototype[tagName] = function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return this.component.apply(this, [tagName].concat(__slice.call(args)));
      };
    };
    for (_i = 0, _len = TagNames.length; _i < _len; _i++) {
      tagName = TagNames[_i];
      _fn(tagName);
    }

    DOMBuilder.prototype.childrenStack = null;

    DOMBuilder.prototype.component = function() {
      var arg, args, attributes, children, component, content, text, _j, _len1;
      component = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      for (_j = 0, _len1 = args.length; _j < _len1; _j++) {
        arg = args[_j];
        switch (typeof arg) {
          case 'function':
            content = arg;
            break;
          case 'string':
          case 'number':
            text = arg.toString();
            break;
          case 'object':
            attributes = arg;
        }
      }
      if (content != null) {
        this.pushChildren();
        content.call(this);
        children = this.popChildren();
      } else if (text != null) {
        children = [text];
      } else {
        children = [];
      }
      switch (typeof component) {
        case 'string':
          return this.appendChild(DOM[component].apply(DOM, [attributes].concat(__slice.call(children))));
        case 'function':
          return this.appendChild((function(func, args, ctor) {
            ctor.prototype = func.prototype;
            var child = new ctor, result = func.apply(child, args);
            return Object(result) === result ? result : child;
          })(component, [attributes].concat(__slice.call(children)), function(){}));
        default:
          if (args.length > 0) {
            throw new Error("If you want to pass arguments to ::component, the first argument must be a string or a function");
          }
          return this.appendChild(component);
      }
    };

    DOMBuilder.prototype.components = function() {
      var component, components, _j, _len1, _results;
      components = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      _results = [];
      for (_j = 0, _len1 = components.length; _j < _len1; _j++) {
        component = components[_j];
        switch (typeof component) {
          case 'array':
            _results.push(this.components(component));
            break;
          case 'object':
            _results.push(this.appendChild(component));
            break;
          default:
            throw new Error("The arguments to ::components must be objects or arrays of objects");
        }
      }
      return _results;
    };

    DOMBuilder.prototype.text = function(text) {
      return this.appendChild(text);
    };

    DOMBuilder.prototype.pushChildren = function() {
      if (this.childrenStack == null) {
        this.childrenStack = [];
      }
      return this.childrenStack.push([]);
    };

    DOMBuilder.prototype.popChildren = function() {
      return this.childrenStack.pop();
    };

    DOMBuilder.prototype.appendChild = function(child) {
      var _ref1, _ref2;
      if ((_ref1 = this.childrenStack) != null) {
        if ((_ref2 = _ref1[this.childrenStack.length - 1]) != null) {
          _ref2.push(child);
        }
      }
      return child;
    };

    return DOMBuilder;

  }).call(this, Mixin);

}).call(this);

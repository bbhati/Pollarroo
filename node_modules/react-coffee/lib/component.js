(function() {
  var Component, DOMBuilder, Delegator, ExampleReactComponent, PropertyAccessors, React,
    __slice = [].slice;

  React = require('react');

  Delegator = require('delegato');

  PropertyAccessors = require('property-accessors');

  DOMBuilder = require('./dom-builder');

  ExampleReactComponent = React.createClass({
    render: function() {}
  }).componentConstructor.prototype;

  module.exports = Component = (function() {
    var key, value;

    Delegator.includeInto(Component);

    PropertyAccessors.includeInto(Component);

    DOMBuilder.includeInto(Component);

    for (key in ExampleReactComponent) {
      value = ExampleReactComponent[key];
      if (key !== 'constructor' && typeof value === 'function') {
        Component.delegatesMethod(key, {
          toProperty: 'wrappedComponent'
        });
      }
    }

    Component.delegatesProperties('props', 'state', 'refs', {
      toProperty: 'wrappedComponent'
    });

    Component.getWrappedComponentClass = function() {
      return this.wrappedComponentClass != null ? this.wrappedComponentClass : this.wrappedComponentClass = React.createClass({
        displayName: this.name,
        render: function() {
          return this.wrapper.render();
        },
        getInitialState: this.prototype.getInitialState != null ? (function() {
          return this.wrapper.getInitialState();
        }) : void 0,
        getDefaultProps: this.prototype.getDefaultProps != null ? (function() {
          return this.wrapper.getDefaultProps();
        }) : void 0,
        propTypes: this.prototype.propTypes,
        mixins: this.prototype.mixins,
        componentWillMount: this.prototype.componentWillMount != null ? (function() {
          return this.wrapper.componentWillMount();
        }) : void 0,
        componentDidMount: function() {
          var args, _base;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          this.wrapper.updateRefs();
          return typeof (_base = this.wrapper).componentDidMount === "function" ? _base.componentDidMount.apply(_base, args) : void 0;
        },
        componentWillReceiveProps: this.prototype.componentWillReceiveProps != null ? (function() {
          var args, _ref;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          return (_ref = this.wrapper).componentWillReceiveProps.apply(_ref, args);
        }) : void 0,
        shouldComponentUpdate: this.prototype.shouldComponentUpdate != null ? (function() {
          return this.wrapper.shouldComponentUpdate();
        }) : void 0,
        componentWillUpdate: this.prototype.componentWillUpdate != null ? (function() {
          var args, _ref;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          return (_ref = this.wrapper).componentWillUpdate.apply(_ref, args);
        }) : void 0,
        componentDidUpdate: function() {
          var args, _base;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          this.wrapper.updateRefs();
          return typeof (_base = this.wrapper).componentDidUpdate === "function" ? _base.componentDidUpdate.apply(_base, args) : void 0;
        },
        componentWillUnmount: this.prototype.componentWillUnmount != null ? (function() {
          return this.wrapper.componentWillUnmount();
        }) : void 0
      });
    };

    function Component() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      this.wrappedComponent = this.constructor.getWrappedComponentClass().apply(null, args);
      this.wrappedComponent.wrapper = this;
      this.refs = {};
    }

    Component.prototype.render = function() {
      var _ref;
      throw new Error("You must implement ::render on component " + ((_ref = this.constructor.displayName) != null ? _ref : this.constructor.name));
    };

    Component.prototype.lazyAccessor('element', function() {
      var container;
      container = document.createElement('div');
      React.renderComponent(this.wrappedComponent, container);
      return container.firstChild;
    });

    Component.prototype.updateRefs = function() {
      var name, wrapper, _ref, _results;
      for (name in this.refs) {
        if (this.wrappedComponent.refs[name] == null) {
          delete this.refs[name];
        }
      }
      _ref = this.wrappedComponent.refs;
      _results = [];
      for (name in _ref) {
        wrapper = _ref[name].wrapper;
        _results.push(this.refs[name] = wrapper);
      }
      return _results;
    };

    return Component;

  })();

}).call(this);
